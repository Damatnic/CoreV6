generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AdminProfile {
  id                   String     @id
  userId               String     @unique
  adminLevel           AdminLevel @default(MODERATOR)
  departments          String[]
  permissions          Json
  employeeId           String?
  department           String?
  managerUserId        String?
  canModerateUsers     Boolean    @default(true)
  canManageHelpers     Boolean    @default(false)
  canAccessAnalytics   Boolean    @default(true)
  canManageContent     Boolean    @default(true)
  canHandleCrisis      Boolean    @default(false)
  canManageSystem      Boolean    @default(false)
  actionsPerformed     Int        @default(0)
  lastModerationAction DateTime?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime
  User                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([adminLevel])
  @@index([userId])
}

model AnonymousIdentity {
  id                                                                String                   @id
  userId                                                            String                   @unique
  displayName                                                       String
  avatar                                                            String
  colorTheme                                                        String
  trustScore                                                        Float                    @default(0)
  badges                                                            Json[]
  languages                                                         String[]
  timezone                                                          String?
  createdAt                                                         DateTime                 @default(now())
  updatedAt                                                         DateTime
  User                                                              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ChallengeParticipation                                            ChallengeParticipation[]
  ChatMessage                                                       ChatMessage[]
  GroupMembership                                                   GroupMembership[]
  MentorProfile                                                     MentorProfile?
  ModerationAction_ModerationAction_moderatorIdToAnonymousIdentity  ModerationAction[]       @relation("ModerationAction_moderatorIdToAnonymousIdentity")
  ModerationAction_ModerationAction_targetUserIdToAnonymousIdentity ModerationAction[]       @relation("ModerationAction_targetUserIdToAnonymousIdentity")

  @@index([trustScore])
  @@index([userId])
}

model Appointment {
  id             String   @id
  userId         String
  professionalId String
  scheduledAt    DateTime
  duration       Int
  type           String
  status         String
  encryptedNotes Json?
  meetingUrl     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([professionalId])
  @@index([scheduledAt])
  @@index([status])
  @@index([userId])
}

model AuditLog {
  id         String   @id
  userId     String?
  action     String
  resource   String?
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  outcome    String
  timestamp  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([outcome])
  @@index([timestamp])
  @@index([userId])
}

model ChallengeParticipation {
  id                String            @id
  challengeId       String
  userId            String
  points            Int               @default(0)
  streak            Int               @default(0)
  completionRate    Float             @default(0)
  completedTasks    String[]
  achievements      String[]
  joinedAt          DateTime          @default(now())
  lastActivityAt    DateTime          @default(now())
  WellnessChallenge WellnessChallenge @relation(fields: [challengeId], references: [id])
  AnonymousIdentity AnonymousIdentity @relation(fields: [userId], references: [id])

  @@unique([challengeId, userId])
  @@index([challengeId])
  @@index([points])
  @@index([userId])
}

model ChatMessage {
  id                String            @id
  roomId            String
  authorId          String
  content           String
  type              String
  edited            Boolean           @default(false)
  editedAt          DateTime?
  reactions         Json[]
  flags             Json[]
  metadata          Json?
  createdAt         DateTime          @default(now())
  AnonymousIdentity AnonymousIdentity @relation(fields: [authorId], references: [id])
  ChatRoom          ChatRoom          @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([createdAt])
  @@index([roomId])
}

model ChatModerator {
  id          String   @id
  roomId      String
  userId      String
  assignedAt  DateTime @default(now())
  permissions String[]
  ChatRoom    ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
}

model ChatParticipant {
  id       String    @id
  roomId   String
  userId   String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  isActive Boolean   @default(true)
  ChatRoom ChatRoom  @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
}

model ChatRoom {
  id              String            @id
  name            String
  topic           String
  description     String
  maxParticipants Int               @default(20)
  isActive        Boolean           @default(true)
  language        String            @default("en")
  rules           String[]
  settings        Json
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  lastActivity    DateTime          @default(now())
  ChatMessage     ChatMessage[]
  ChatModerator   ChatModerator[]
  ChatParticipant ChatParticipant[]

  @@index([isActive])
  @@index([language])
  @@index([topic])
}

model CommunityPost {
  id          String    @id
  authorId    String?
  title       String
  content     String
  category    String
  isAnonymous Boolean   @default(true)
  isPinned    Boolean   @default(false)
  isModerated Boolean   @default(false)
  viewCount   Int       @default(0)
  likeCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  User        User?     @relation(fields: [authorId], references: [id])
  Comments    Comment[]

  @@index([authorId])
  @@index([category])
  @@index([createdAt])
}

model Comment {
  id          String        @id
  postId      String
  authorId    String?
  parentId    String?       // For nested comments
  content     String
  isAnonymous Boolean       @default(true)
  isModerated Boolean       @default(false)
  likeCount   Int           @default(0)
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Post        CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  User        User?         @relation(fields: [authorId], references: [id])
  Parent      Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  Replies     Comment[]     @relation("CommentReplies")

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
}

model CrisisReport {
  id                   String    @id
  userId               String?
  severityLevel        Int
  triggerType          String
  interventionType     String
  encryptedDetails     Json
  responseTime         Int
  resolved             Boolean   @default(false)
  resolvedAt           DateTime?
  emergencyContactUsed Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  User                 User?     @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([severityLevel])
  @@index([userId])
}

model EmailVerification {
  id        String   @id
  userId    String
  token     String   @unique
  email     String
  expires   DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
  @@index([token])
  @@index([userId])
}

model GroupActivity {
  id           String       @id
  groupId      String
  type         String
  title        String
  description  String
  instructions String[]
  duration     Int
  completedBy  String[]
  createdAt    DateTime     @default(now())
  SupportGroup SupportGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
}

model GroupMembership {
  id                String            @id
  groupId           String
  userId            String
  role              String            @default("member")
  joinedAt          DateTime          @default(now())
  leftAt            DateTime?
  isActive          Boolean           @default(true)
  SupportGroup      SupportGroup      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  AnonymousIdentity AnonymousIdentity @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model GroupSession {
  id           String       @id
  groupId      String
  scheduledAt  DateTime
  duration     Int
  actualStart  DateTime?
  actualEnd    DateTime?
  attendees    String[]
  notes        Json?
  recordings   String[]
  status       String       @default("scheduled")
  SupportGroup SupportGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([scheduledAt])
  @@index([status])
}

model HelperProfile {
  id                        String         @id
  userId                    String         @unique
  title                     String?
  specializations           String[]
  credentials               Json
  experience                String
  approach                  String
  languages                 String[]
  availability              Json
  timezone                  String         @default("UTC")
  maxClients                Int            @default(10)
  currentClients            Int            @default(0)
  acceptingClients          Boolean        @default(true)
  isVerified                Boolean        @default(false)
  verificationDate          DateTime?
  verifiedBy                String?
  rating                    Float          @default(0.0)
  totalReviews              Int            @default(0)
  backgroundCheckCompleted  Boolean        @default(false)
  backgroundCheckDate       DateTime?
  requiredTrainingCompleted Boolean        @default(false)
  trainingCompletionDate    DateTime?
  trainingCertificates      Json           @default("[]")
  totalSessions             Int            @default(0)
  responseTime              Float?
  lastActiveAt              DateTime       @default(now())
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime
  User                      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  HelperReview              HelperReview[]

  @@index([acceptingClients])
  @@index([isVerified])
  @@index([rating])
  @@index([userId])
}

model HelperReview {
  id            String        @id
  helperId      String
  reviewerId    String
  sessionId     String?
  rating        Int
  comment       String?
  categories    Json
  isAnonymous   Boolean       @default(true)
  isVerified    Boolean       @default(false)
  helpfulVotes  Int           @default(0)
  reportCount   Int           @default(0)
  isHidden      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  HelperProfile HelperProfile @relation(fields: [helperId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([helperId])
  @@index([rating])
}

model JournalEntry {
  id               String   @id
  userId           String
  encryptedTitle   String?
  encryptedContent String
  encryptedTags    Json?
  isPrivate        Boolean  @default(true)
  sentiment        Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId])
}

model MentorProfile {
  id                String            @id
  userId            String            @unique
  specializations   String[]
  experience        String
  approach          String
  availability      Json[]
  languages         String[]
  maxMentees        Int               @default(5)
  currentMentees    String[]
  rating            Float             @default(0)
  verified          Boolean           @default(false)
  trainingCompleted String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  AnonymousIdentity AnonymousIdentity @relation(fields: [userId], references: [id])
  MentorReview      MentorReview[]
  Mentorship        Mentorship[]

  @@index([rating])
  @@index([userId])
  @@index([verified])
}

model MentorReview {
  id            String        @id
  mentorId      String
  reviewerId    String
  rating        Int
  comment       String
  helpful       Int           @default(0)
  verified      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  MentorProfile MentorProfile @relation(fields: [mentorId], references: [id])

  @@index([mentorId])
  @@index([rating])
}

model Mentorship {
  id                String              @id
  mentorId          String
  menteeId          String
  topics            String[]
  goals             String[]
  status            String              @default("active")
  matchedAt         DateTime            @default(now())
  endedAt           DateTime?
  MentorProfile     MentorProfile       @relation(fields: [mentorId], references: [id])
  MentorshipSession MentorshipSession[]

  @@unique([mentorId, menteeId])
  @@index([menteeId])
  @@index([mentorId])
  @@index([status])
}

model MentorshipSession {
  id           String     @id
  mentorshipId String
  scheduledAt  DateTime
  duration     Int
  topic        String
  goals        String[]
  notes        Json?
  resources    Json[]
  feedback     Json?
  status       String     @default("scheduled")
  createdAt    DateTime   @default(now())
  Mentorship   Mentorship @relation(fields: [mentorshipId], references: [id])

  @@index([mentorshipId])
  @@index([scheduledAt])
}

model ModerationAction {
  id                                                                 String            @id
  type                                                               String
  targetUserId                                                       String
  moderatorId                                                        String
  reason                                                             String
  evidence                                                           String[]
  duration                                                           Int?
  appealable                                                         Boolean           @default(true)
  appealed                                                           Boolean           @default(false)
  createdAt                                                          DateTime          @default(now())
  expiresAt                                                          DateTime?
  AnonymousIdentity_ModerationAction_moderatorIdToAnonymousIdentity  AnonymousIdentity @relation("ModerationAction_moderatorIdToAnonymousIdentity", fields: [moderatorId], references: [id])
  AnonymousIdentity_ModerationAction_targetUserIdToAnonymousIdentity AnonymousIdentity @relation("ModerationAction_targetUserIdToAnonymousIdentity", fields: [targetUserId], references: [id])

  @@index([createdAt])
  @@index([moderatorId])
  @@index([targetUserId])
  @@index([type])
}

model MoodEntry {
  id             String   @id
  userId         String
  moodScore      Int
  anxietyLevel   Int?
  energyLevel    Int?
  encryptedNotes Json?
  encryptedTags  Json?
  createdAt      DateTime @default(now())
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([moodScore])
  @@index([userId])
}

model Notification {
  id         String    @id
  userId     String
  type       String
  title      String
  message    String
  isRead     Boolean   @default(false)
  isPriority Boolean   @default(false)
  metadata   Json?
  createdAt  DateTime  @default(now())
  readAt     DateTime?
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([isRead])
  @@index([userId])
}

model Conversation {
  id           String              @id
  type         String              @default("direct") // direct, group, support
  title        String?
  isAnonymous  Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime
  lastActivity DateTime            @default(now())
  metadata     Json?
  Participants ConversationParticipant[]
  Messages     DirectMessage[]

  @@index([type])
  @@index([lastActivity])
}

model ConversationParticipant {
  id             String       @id
  conversationId String
  userId         String
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  isActive       Boolean      @default(true)
  isMuted        Boolean      @default(false)
  lastReadAt     DateTime     @default(now())
  role           String       @default("member") // member, moderator, support
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
}

model DirectMessage {
  id             String       @id
  conversationId String
  senderId       String
  content        String
  type           String       @default("text") // text, image, file, system
  isEdited       Boolean      @default(false)
  isDeleted      Boolean      @default(false)
  metadata       Json?
  reactions      Json[]
  createdAt      DateTime     @default(now())
  editedAt       DateTime?
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  Sender         User         @relation(fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

model PasswordReset {
  id        String   @id
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
  @@index([token])
  @@index([userId])
}

model SafetyAlert {
  id         String    @id
  type       String
  severity   String
  userId     String
  context    String
  indicators String[]
  handled    Boolean   @default(false)
  handledBy  String?
  actions    String[]
  notes      String?
  detectedAt DateTime  @default(now())
  handledAt  DateTime?

  @@index([detectedAt])
  @@index([handled])
  @@index([severity])
  @@index([type])
  @@index([userId])
}

model SafetyPlan {
  id                        String   @id
  userId                    String
  warningSignsEncrypted     Json
  copingStrategiesEncrypted Json
  supportContactsEncrypted  Json
  safeEnvironmentEncrypted  Json
  reasonsToLiveEncrypted    Json?
  isActive                  Boolean  @default(true)
  lastReviewedAt            DateTime @default(now())
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime
  User                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Removed duplicate Session model - using the enhanced Session model at line 1444

model SupportGroup {
  id              String            @id
  name            String
  topic           String
  description     String
  facilitatorId   String?
  maxMembers      Int               @default(12)
  type            String
  privacy         String
  schedule        Json
  requirements    Json
  resources       Json[]
  tags            String[]
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  GroupActivity   GroupActivity[]
  GroupMembership GroupMembership[]
  GroupSession    GroupSession[]

  @@index([isActive])
  @@index([topic])
  @@index([type])
}

model SupportSession {
  id                                 String    @id
  userId                             String?
  helperId                           String?
  sessionType                        String
  status                             String
  encryptedNotes                     Json?
  rating                             Int?
  startedAt                          DateTime?
  endedAt                            DateTime?
  createdAt                          DateTime  @default(now())
  User_SupportSession_helperIdToUser User?     @relation("SupportSession_helperIdToUser", fields: [helperId], references: [id])
  User_SupportSession_userIdToUser   User?     @relation("SupportSession_userIdToUser", fields: [userId], references: [id])

  @@index([helperId])
  @@index([status])
  @@index([userId])
}

model TrustMetric {
  id           String   @id
  userId       String   @unique
  score        Float    @default(0)
  level        String   @default("new")
  factors      Json
  history      Json[]
  restrictions String[]
  lastUpdated  DateTime @default(now())

  @@index([level])
  @@index([score])
  @@index([userId])
}

model User {
  id                                           String              @id
  anonymousId                                  String              @unique
  email                                        String?             @unique
  hashedPassword                               String?
  role                                         UserRole            @default(USER)
  permissions                                  String[]            @default([])
  isActive                                     Boolean             @default(true)
  isEmailVerified                              Boolean             @default(false)
  isTwoFactorEnabled                           Boolean             @default(false)
  twoFactorSecret                              String?
  firstName                                    String?
  lastName                                     String?
  displayName                                  String?
  avatarUrl                                    String?
  phoneNumber                                  String?
  dateOfBirth                                  DateTime?
  dataRetentionDays                            Int                 @default(90)
  allowAnalytics                               Boolean             @default(false)
  timezone                                     String              @default("UTC")
  preferredLanguage                            String              @default("en")
  privacySettings                              Json                @default("{}")
  lastLoginAt                                  DateTime?
  lastActiveAt                                 DateTime            @default(now())
  failedLoginAttempts                          Int                 @default(0)
  lockedUntil                                  DateTime?
  createdAt                                    DateTime            @default(now())
  updatedAt                                    DateTime
  Account                                      Account[]
  AdminProfile                                 AdminProfile?
  AnonymousIdentity                            AnonymousIdentity?
  Appointment                                  Appointment[]
  AuditLog                                     AuditLog[]
  CommunityPost                                CommunityPost[]
  Comment                                      Comment[]
  ConversationParticipant                      ConversationParticipant[]
  DirectMessage                                DirectMessage[]
  CrisisReport                                 CrisisReport[]
  EmailVerification                            EmailVerification[]
  HelperProfile                                HelperProfile?
  JournalEntry                                 JournalEntry[]
  MoodEntry                                    MoodEntry[]
  Notification                                 Notification[]
  PasswordReset                                PasswordReset[]
  SafetyPlan                                   SafetyPlan[]
  Session                                      Session[]
  SessionEventLog                              SessionEventLog[]
  TemporaryPermissionsReceived                 TemporaryPermission[] @relation("UserTemporaryPermissions")
  TemporaryPermissionsGranted                  TemporaryPermission[] @relation("GrantedTemporaryPermissions")
  RolePermissionOverrides                      RolePermissionOverride[]
  OwnedResources                               ResourceOwnership[] @relation("OwnedResources")
  TransferredResources                         ResourceOwnership[] @relation("TransferredResources")
  PermissionCheckAudits                        PermissionCheckAudit[]
  SupportSession_SupportSession_helperIdToUser SupportSession[]    @relation("SupportSession_helperIdToUser")
  SupportSession_SupportSession_userIdToUser   SupportSession[]    @relation("SupportSession_userIdToUser")
  UserProfile                                  UserProfile?
  TherapistClients                             TherapistClient[]   @relation("TherapistClients")
  TherapistSessions                            TherapistSession[]  @relation("TherapistSessions")
  TherapistNotes                               TherapySessionNote[] @relation("TherapistNotes")
  TherapistClinicalNotes                       TherapistClinicalNote[] @relation("TherapistClinicalNotes")
  TherapistAssessments                         TherapistAssessment[] @relation("TherapistAssessments")
  FileStorage                                  FileStorage[]
  Files                                        File[]
  NotificationPreference                       NotificationPreference?
  DataExportJob                                DataExportJob[]
  ExportJobs                                   ExportJob[]
  FileQuota                                    FileQuota?
  AccessibilityPreference                      AccessibilityPreference?
  OfflineData                                  OfflineData[]

  @@index([anonymousId])
  @@index([email])
  @@index([isActive])
  @@index([lastActiveAt])
  @@index([role])
}

model UserProfile {
  id                     String    @id
  userId                 String    @unique
  mentalHealthGoals      String[]
  interestedTopics       String[]
  preferredCommunication String[]
  crisisContacts         Json
  medicalInfo            Json?
  therapyHistory         Json?
  notificationSettings   Json      @default("{}")
  privacyLevel           String    @default("moderate")
  shareDataForResearch   Boolean   @default(false)
  onboardingCompleted    Boolean   @default(false)
  wellnessScore          Float?
  lastAssessmentAt       DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime
  User                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
  @@index([token])
}

model WellnessChallenge {
  id                     String                   @id
  title                  String
  description            String
  category               String
  difficulty             String
  duration               Int
  goals                  Json[]
  rewards                Json[]
  dailyTasks             Json[]
  startDate              DateTime
  endDate                DateTime
  isActive               Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  ChallengeParticipation ChallengeParticipation[]

  @@index([category])
  @@index([isActive])
  @@index([startDate])
}

enum AdminLevel {
  MODERATOR
  MANAGER
  ADMINISTRATOR
  SUPER_ADMIN
}

model TherapistClient {
  id                   String                @id @default(cuid())
  therapistId          String
  clientNumber         String                @unique
  firstName            String
  lastName             String
  email                String
  phone                String
  dateOfBirth          DateTime
  gender               String
  addressEncrypted     Json // Encrypted for HIPAA compliance
  emergencyContactEncrypted Json // Encrypted for HIPAA compliance
  intakeDate           DateTime
  lastSessionDate      DateTime?
  nextSessionDate      DateTime?
  status               ClientStatus          @default(INTAKE)
  riskLevel            RiskLevel            @default(LOW)
  primaryDiagnosis     String?
  secondaryDiagnoses   String[]
  treatmentModality    String?
  sessionFrequency     String?
  totalSessions        Int                  @default(0)
  completedSessions    Int                  @default(0)
  missedSessions       Int                  @default(0)
  progress             Int                  @default(0)
  treatmentGoalsEncrypted Json // Encrypted for HIPAA compliance
  medicationsEncrypted Json // Encrypted for HIPAA compliance
  allergies            String[]
  insuranceInfoEncrypted Json // Encrypted for HIPAA compliance
  therapistUser        User                 @relation("TherapistClients", fields: [therapistId], references: [id], onDelete: Cascade)
  clinicalNotes        TherapistClinicalNote[]
  sessions             TherapistSession[]
  assessments          TherapistAssessment[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt

  @@index([therapistId])
  @@index([status])
  @@index([riskLevel])
  @@index([clientNumber])
}

model TherapistSession {
  id               String           @id @default(cuid())
  therapistId      String
  clientId         String
  scheduledTime    DateTime
  duration         Int // in minutes
  type             SessionType
  sessionType      SessionCategory
  status           TherapySessionStatus    @default(SCHEDULED)
  billingCode      String?
  fee              Float?
  copay            Float?
  insuranceClaim   String?
  notesEncrypted   Json? // Encrypted for HIPAA compliance
  therapistUser    User             @relation("TherapistSessions", fields: [therapistId], references: [id], onDelete: Cascade)
  client           TherapistClient  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  sessionNotes     TherapySessionNote[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([therapistId])
  @@index([clientId])
  @@index([scheduledTime])
  @@index([status])
}

model TherapySessionNote {
  id                  String           @id @default(cuid())
  sessionId           String?
  therapistId         String
  clientId            String
  sessionDate         DateTime
  sessionType         String
  sessionDuration     Int
  treatmentModality   String
  sessionGoalsEncrypted Json // Encrypted for HIPAA compliance
  progressNotesEncrypted Json // Encrypted for HIPAA compliance
  interventionsEncrypted Json // Encrypted for HIPAA compliance
  clientResponseEncrypted Json // Encrypted for HIPAA compliance
  homeworkEncrypted   Json? // Encrypted for HIPAA compliance
  nextSessionPlanEncrypted Json? // Encrypted for HIPAA compliance
  riskAssessment      RiskLevel        @default(LOW)
  confidentialityNotesEncrypted Json? // Encrypted for HIPAA compliance
  supervisorReview    Boolean          @default(false)
  supervisorId        String?
  billable            Boolean          @default(true)
  insuranceCode       String?
  isTemplate          Boolean          @default(false)
  tags                String[]
  attachmentsEncrypted Json? // Encrypted for HIPAA compliance
  therapistUser       User             @relation("TherapistNotes", fields: [therapistId], references: [id], onDelete: Cascade)
  session             TherapistSession? @relation(fields: [sessionId], references: [id])
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  lastModified        DateTime         @default(now())

  @@index([therapistId])
  @@index([clientId])
  @@index([sessionDate])
  @@index([supervisorReview])
}

model TherapistClinicalNote {
  id              String          @id @default(cuid())
  clientId        String
  therapistId     String
  date            DateTime
  type            NoteType
  contentEncrypted Json // Encrypted for HIPAA compliance
  riskAssessment  RiskLevel?
  client          TherapistClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  therapistUser   User            @relation("TherapistClinicalNotes", fields: [therapistId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([clientId])
  @@index([therapistId])
  @@index([date])
}

model TherapistAssessment {
  id                String          @id @default(cuid())
  clientId          String
  therapistId       String
  type              String
  date              DateTime
  scoreEncrypted    Json // Encrypted for HIPAA compliance
  interpretationEncrypted Json // Encrypted for HIPAA compliance
  client            TherapistClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  therapistUser     User            @relation("TherapistAssessments", fields: [therapistId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([clientId])
  @@index([therapistId])
  @@index([date])
}

enum ClientStatus {
  INTAKE
  ACTIVE
  ON_HOLD
  COMPLETED
  TERMINATED
  NO_SHOW
}

enum RiskLevel {
  LOW
  MODERATE
  HIGH
  CRISIS
}

enum SessionType {
  VIDEO
  IN_PERSON
  PHONE
}

enum SessionCategory {
  INDIVIDUAL
  GROUP
  FAMILY
  COUPLES
}

enum TherapySessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum NoteType {
  INTAKE
  PROGRESS
  TREATMENT_PLAN
  CRISIS
  DISCHARGE
}

enum UserRole {
  USER
  HELPER
  THERAPIST
  CRISIS_COUNSELOR
  ADMIN
  SUPER_ADMIN
}

// Platform Features Models

model FileStorage {
  id                String        @id @default(cuid())
  userId            String
  name              String
  originalName      String
  mimeType          String
  size              BigInt
  path              String
  url               String?
  thumbnailUrl      String?
  type              String        @default("file") // file or folder
  parentId          String?
  isEncrypted       Boolean       @default(false)
  encryptionKey     String?
  isShared          Boolean       @default(false)
  isPublic          Boolean       @default(false)
  isStarred         Boolean       @default(false)
  tags              String[]
  version           Int           @default(1)
  metadata          Json?
  virusScanStatus   String        @default("pending") // pending, clean, infected, failed
  virusScanDate     DateTime?
  uploadStatus      String        @default("uploading") // uploading, completed, failed, processing
  uploadProgress    Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  lastAccessedAt    DateTime      @default(now())
  deletedAt         DateTime?
  User              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Parent            FileStorage?  @relation("FileChildren", fields: [parentId], references: [id])
  Children          FileStorage[] @relation("FileChildren")
  // Relations removed - use File model for shares and versions

  @@index([userId])
  @@index([parentId])
  @@index([isShared])
  @@index([deletedAt])
  @@index([mimeType])
}

// Removed duplicate FileShare model - using the one at line 1325

// Removed duplicate FileVersion model - using the one at line 1347

// Removed duplicate NotificationTemplate model - using the one at line 1383

// Removed duplicate NotificationPreference model - using the one at line 1400

model NotificationDelivery {
  id               String   @id @default(cuid())
  notificationId   String
  channel          String   // in_app, email, sms, push, phone_call
  status           String   @default("pending") // pending, sent, delivered, failed, read
  attemptCount     Int      @default(0)
  lastAttemptAt    DateTime?
  deliveredAt      DateTime?
  readAt           DateTime?
  errorMessage     String?
  metadata         Json?
  createdAt        DateTime @default(now())

  @@index([notificationId])
  @@index([status])
  @@index([channel])
}

model DataExportJob {
  id            String    @id @default(cuid())
  userId        String
  type          String    // user_data, analytics, audit_logs, etc.
  format        String    // json, csv, pdf
  status        String    @default("pending") // pending, processing, completed, failed
  filters       Json?     // Date ranges, categories, etc.
  fileUrl       String?
  fileSize      BigInt?
  progress      Int       @default(0)
  errorMessage  String?
  startedAt     DateTime?
  completedAt   DateTime?
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model TranslationCache {
  id           String   @id @default(cuid())
  sourceText   String
  sourceLang   String
  targetLang   String
  translation  String
  provider     String   @default("google") // google, deepl, azure, etc.
  confidence   Float?
  usageCount   Int      @default(1)
  lastUsedAt   DateTime @default(now())
  createdAt    DateTime @default(now())

  @@unique([sourceText, sourceLang, targetLang])
  @@index([sourceLang, targetLang])
  @@index([lastUsedAt])
}

model AccessibilityPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique
  fontSize            String   @default("medium") // small, medium, large, extra-large
  contrast            String   @default("normal") // normal, high, low
  colorScheme         String   @default("default") // default, deuteranopia, protanopia, tritanopia
  reduceMotion        Boolean  @default(false)
  screenReaderMode    Boolean  @default(false)
  keyboardNavigation  Boolean  @default(false)
  focusIndicators     Boolean  @default(true)
  audioDescriptions   Boolean  @default(false)
  captionsEnabled     Boolean  @default(false)
  language            String   @default("en")
  readingSpeed        String   @default("normal") // slow, normal, fast
  customCSS           String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  User                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model OfflineData {
  id            String   @id @default(cuid())
  userId        String
  dataType      String   // journal, mood, crisis_plan, etc.
  data          Json
  version       Int      @default(1)
  syncStatus    String   @default("pending") // pending, syncing, synced, conflict
  deviceId      String
  lastModified  DateTime
  syncedAt      DateTime?
  conflictData  Json?
  createdAt     DateTime @default(now())
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dataType, deviceId])
  @@index([userId])
  @@index([syncStatus])
  @@index([deviceId])
}

model SearchIndex {
  id           String   @id @default(cuid())
  contentType  String   // post, comment, resource, user, etc.
  contentId    String
  title        String?
  content      String
  tags         String[]
  metadata     Json?
  visibility   String   @default("public") // public, private, restricted
  weight       Float    @default(1.0)
  lastIndexed  DateTime @default(now())
  createdAt    DateTime @default(now())

  @@unique([contentType, contentId])
  @@index([contentType])
  @@index([tags])
  @@index([visibility])
  @@index([lastIndexed])
}

// File Management Models
model File {
  id                String           @id @default(cuid())
  userId            String
  filename          String
  originalName      String
  mimeType          String
  size              Int
  path              String
  thumbnailPath     String?
  encryptionKey     String?          // For encrypted files
  isEncrypted       Boolean          @default(false)
  virusScanStatus   String           @default("pending") // pending, clean, infected, error
  virusScanDate     DateTime?
  metadata          Json?
  tags              String[]
  category          String?          // document, image, video, audio, other
  version           Int              @default(1)
  previousVersionId String?
  isPublic          Boolean          @default(false)
  expiresAt         DateTime?
  downloadCount     Int              @default(0)
  lastAccessedAt    DateTime?
  checksum          String           // SHA-256 hash for integrity
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  User              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  FileShares        FileShare[]
  FileVersions      FileVersion[]
  FileAccess        FileAccessLog[]

  @@index([userId])
  @@index([category])
  @@index([virusScanStatus])
  @@index([isPublic])
  @@index([createdAt])
}

model FileShare {
  id            String    @id @default(cuid())
  fileId        String
  sharedById    String
  sharedWithId  String?   // Null for public shares
  permission    String    @default("view") // view, download, edit, delete
  shareToken    String?   @unique // For public/anonymous shares
  password      String?   // Optional password protection
  expiresAt     DateTime?
  accessCount   Int       @default(0)
  lastAccessedAt DateTime?
  createdAt     DateTime  @default(now())
  File          File      @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, sharedWithId])
  @@index([fileId])
  @@index([sharedById])
  @@index([sharedWithId])
  @@index([shareToken])
  @@index([expiresAt])
}

model FileVersion {
  id           String   @id @default(cuid())
  fileId       String
  version      Int
  path         String
  size         Int
  checksum     String
  changedBy    String
  changeNotes  String?
  createdAt    DateTime @default(now())
  File         File     @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, version])
  @@index([fileId])
  @@index([createdAt])
}

model FileAccessLog {
  id         String   @id @default(cuid())
  fileId     String
  userId     String?
  action     String   // view, download, edit, delete, share
  ipAddress  String?
  userAgent  String?
  success    Boolean  @default(true)
  errorMsg   String?
  createdAt  DateTime @default(now())
  File       File     @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([fileId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

// Notification Models
model NotificationTemplate {
  id              String   @id @default(cuid())
  name            String   @unique
  category        String   // system, crisis, appointment, community, wellness
  subject         String?  // For email notifications
  contentTemplate String   // Supports variables like {{userName}}
  channels        String[] // email, sms, push, in-app
  priority        String   @default("normal") // low, normal, high, urgent
  variables       Json     // Schema for template variables
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([category])
  @@index([isActive])
}

model NotificationPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  emailEnabled      Boolean  @default(true)
  smsEnabled        Boolean  @default(false)
  pushEnabled       Boolean  @default(true)
  inAppEnabled      Boolean  @default(true)
  quietHoursStart   String?  // HH:MM format
  quietHoursEnd     String?  // HH:MM format
  categories        Json     // Per-category preferences
  frequency         String   @default("instant") // instant, hourly, daily, weekly
  language          String   @default("en")
  timezone          String   @default("UTC")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NotificationQueue {
  id            String    @id @default(cuid())
  userId        String
  templateId    String?
  channel       String    // email, sms, push, in-app
  recipient     String    // email address, phone number, device token
  subject       String?
  content       String
  metadata      Json?
  priority      String    @default("normal")
  status        String    @default("pending") // pending, processing, sent, failed, cancelled
  attempts      Int       @default(0)
  maxAttempts   Int       @default(3)
  scheduledFor  DateTime  @default(now())
  sentAt        DateTime?
  failureReason String?
  createdAt     DateTime  @default(now())

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([scheduledFor])
  @@index([channel])
}

model NotificationLog {
  id           String   @id @default(cuid())
  userId       String
  queueId      String?
  templateId   String?
  channel      String
  recipient    String
  content      String
  status       String   // delivered, failed, bounced, complained
  deliveredAt  DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  errorDetails Json?
  metadata     Json?
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([channel])
  @@index([status])
  @@index([createdAt])
}

// Data Export Models
model ExportJob {
  id             String    @id @default(cuid())
  userId         String
  type           String    // user_data, journal_entries, mood_data, appointments, all
  format         String    // json, csv, pdf
  status         String    @default("pending") // pending, processing, completed, failed, expired
  progress       Int       @default(0) // 0-100
  filters        Json?     // Date ranges, categories, etc.
  options        Json?     // Format-specific options
  fileSize       Int?
  filePath       String?
  downloadUrl    String?
  expiresAt      DateTime?
  error          String?
  startedAt      DateTime?
  completedAt    DateTime?
  downloadCount  Int       @default(0)
  lastDownloadAt DateTime?
  createdAt      DateTime  @default(now())
  User           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([expiresAt])
}

model FileQuota {
  id              String   @id @default(cuid())
  userId          String   @unique
  maxStorage      BigInt   @default(5368709120) // 5GB in bytes
  usedStorage     BigInt   @default(0)
  maxFileSize     BigInt   @default(104857600) // 100MB in bytes
  maxFiles        Int      @default(1000)
  fileCount       Int      @default(0)
  lastCalculated  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Session Management Models
model Session {
  id                    String            @id @default(cuid())
  userId                String
  sessionToken          String
  sessionTokenIV        String?
  sessionTokenAuthTag   String?
  refreshToken          String?
  refreshTokenIV        String?
  refreshTokenAuthTag   String?
  status                SessionStatus     @default(ACTIVE)
  mfaVerified           Boolean           @default(false)
  ipAddress             String?
  userAgent             String?
  deviceFingerprint     String?
  lastActivity          DateTime          @default(now())
  idleExpiresAt         DateTime
  absoluteExpiresAt     DateTime
  expiresAt             DateTime
  terminatedAt          DateTime?
  terminationReason     String?
  metadata              Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities            SessionActivity[]
  events                SessionEventLog[]

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@index([lastActivity])
  @@index([deviceFingerprint])
  @@index([userId, status])
  @@index([status, expiresAt])
}

model SessionActivity {
  id          String   @id @default(cuid())
  sessionId   String
  activityType String  // PAGE_VIEW, API_CALL, DATA_ACCESS, PHI_ACCESS
  resource    String?
  ipAddress   String?
  timestamp   DateTime @default(now())
  metadata    Json?
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([timestamp])
  @@index([activityType])
  @@index([sessionId, timestamp])
}

model SessionEventLog {
  id        String   @id @default(cuid())
  sessionId String
  userId    String
  eventType String   // LOGIN, LOGOUT, TIMEOUT, FORCE_LOGOUT, IP_CHANGE, etc.
  eventData Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
}

model ConcurrentSessionLimit {
  id         String   @id @default(cuid())
  role       String   @unique
  maxSessions Int     @default(3)
  enforced   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum SessionStatus {
  ACTIVE
  IDLE
  EXPIRED
  TERMINATED
  LOCKED
}

// RBAC Models
model TemporaryPermission {
  id         String    @id @default(cuid())
  userId     String
  grantedBy  String
  resource   String
  action     String
  conditions Json?
  reason     String
  expiresAt  DateTime
  isActive   Boolean   @default(true)
  revokedAt  DateTime?
  revokedBy  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation("UserTemporaryPermissions", fields: [userId], references: [id], onDelete: Cascade)
  granter    User      @relation("GrantedTemporaryPermissions", fields: [grantedBy], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([grantedBy])
  @@index([isActive])
  @@index([expiresAt])
  @@index([resource, action])
}

model RolePermissionOverride {
  id        String   @id @default(cuid())
  role      String
  resource  String
  action    String
  allowed   Boolean
  conditions Json?
  reason    String?
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([role, resource, action])
  @@index([role])
  @@index([resource])
  @@index([role, resource])
}

model ResourceOwnership {
  id               String    @id @default(cuid())
  resourceType     String
  resourceId       String
  ownerId          String
  createdAt        DateTime  @default(now())
  transferredFrom  String?
  transferredAt    DateTime?
  owner            User      @relation("OwnedResources", fields: [ownerId], references: [id], onDelete: Cascade)
  previousOwner    User?     @relation("TransferredResources", fields: [transferredFrom], references: [id], onDelete: SetNull)

  @@unique([resourceType, resourceId])
  @@index([ownerId])
  @@index([resourceType])
  @@index([resourceType, resourceId])
}

model PermissionCheckAudit {
  id         String   @id @default(cuid())
  userId     String
  userRole   String
  resource   String
  action     String
  resourceId String?
  allowed    Boolean
  reason     String?
  checkType  String?  // 'role', 'ownership', 'temporary', 'override'
  context    Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userRole])
  @@index([resource])
  @@index([allowed])
  @@index([timestamp])
}

model RoleHierarchy {
  id         String   @id @default(cuid())
  parentRole String
  childRole  String
  createdAt  DateTime @default(now())

  @@unique([parentRole, childRole])
  @@index([parentRole])
  @@index([childRole])
}
